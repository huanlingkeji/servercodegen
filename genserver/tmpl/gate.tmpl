package service

import (
	"context"
	"solarland/backendv2/cluster/gate/gate/convert"
	"solarland/backendv2/cluster/gate/gate/gen"
	_"solarland/backendv2/pkg/castx"
	{{ .ServerName | LowerFirstChar }}pb "solarland/backendv2/proto/gen/go/avatar/{{ .ServerName | LowerFirstChar }}"
)

func (r *QueryMutationResolver) Create{{ .ModelName }}(ctx context.Context, input gen.Create{{ .ModelName }}Input) (bool, error) {
	_, err := r.RPC().{{ .ServerName }}().Create{{ .ModelName }}(ctx, &{{ .ServerName | LowerFirstChar }}pb.Create{{ .ModelName }}Request{
  // TODO 填充自己的结构
  {{ if .ShowExample}}
		//SenderId:       input.SenderID,
		//ReceiverIdList: input.ReceiverIDList,
		//Content:        input.Content,
		//IsPriority:     input.IsPriority,
		//SendTime:       int64(input.SendTime),
		//GameId:         input.GameID,
		//ValidTime:      int64(input.ValidTime),
  {{- end }}
  	})
	if err != nil {
		return false, err
	}
	return true, nil
}

func (r *QueryMutationResolver) Delete{{ .ModelName }}(ctx context.Context, input gen.Delete{{ .ModelName }}Input) (bool, error) {
	_, err := r.RPC().{{ .ServerName }}().Delete{{ .ModelName }}(ctx, &{{ .ServerName | LowerFirstChar }}pb.Delete{{ .ModelName }}Request{
  // TODO 填充自己的结构
  {{ if .ShowExample}}
		//{{ .ModelName }}Id: input.{{ .ModelName }}ID,
		//GameId:  input.GameID,
  {{- end }}
	})
	if err != nil {
		return false, err
	}
	return true, nil
}

func (r *QueryMutationResolver) Modify{{ .ModelName }}(ctx context.Context, input gen.Modify{{ .ModelName }}Input) (bool, error) {
	_, err := r.RPC().{{ .ServerName }}().Modify{{ .ModelName }}(ctx, &{{ .ServerName | LowerFirstChar }}pb.Modify{{ .ModelName }}Request{
        // TODO 填充自己的结构
        {{ if .ShowExample}}
		//{{ .ModelName }}Id:    input.{{ .ModelName }}ID,
		//GameId:     input.GameID,
		//IsRead:     castx.Boolp2BoolValue(input.IsRead),
		//IsOperated: castx.Boolp2BoolValue(input.IsOperated),
		//Receiver:   input.Receiver,
        {{- end }}
	})
	if err != nil {
		return false, err
	}
	return true, nil
}

func (r *QueryMutationResolver) {{ .ModelName }}List(ctx context.Context, input gen.{{ .ModelName }}ListInput) (*gen.{{ .ModelName }}ListPayload, error) {
	res, err := r.RPC().{{ .ServerName }}().BatchFetchUser{{ .ModelName }}(ctx, &{{ .ServerName | LowerFirstChar }}pb.BatchFetchUser{{ .ModelName }}Request{
        // TODO 填充自己的结构
        {{ if .ShowExample}}
		//ReceiverId: input.ReceiverID,
		//GameId:     input.GameID,
		//Page:       int32(input.Page),
		//PerPageNum: int32(input.PerPageNum),
        {{- end }}
	})
	if err != nil {
		return nil, err
	}
	return &gen.{{ .ModelName }}ListPayload{
		{{ .ModelName }}List:  convert.{{ .ModelName }}s2Gen(res.{{ .ModelName }}List),
		TotalCount: int(res.TotalCount),
	}, nil
}

func (r *QueryMutationResolver) {{ .ModelName }}(ctx context.Context, input gen.{{ .ModelName }}Input) (*gen.{{ .ModelName }}, error) {
	res, err := r.RPC().{{ .ServerName }}().FetchUser{{ .ModelName }}(ctx, &{{ .ServerName | LowerFirstChar }}pb.FetchUser{{ .ModelName }}Request{
        // TODO 填充自己的结构
        {{ if .ShowExample}}
  		//{{ .ModelName }}Id: input.{{ .ModelName }}ID,
		//GameId:  input.GameID,
        {{- end }}
	})
	if err != nil {
		return nil, err
	}
	return convert.{{ .ModelName }}2Gen(res.{{ .ModelName }}), nil
}