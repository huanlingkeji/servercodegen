package {{ .ServerName | LowerFirstChar }}

import (
	"context"
	"github.com/spf13/viper"
	"gorm.io/gorm"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/domain/entity"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/service"
	"solarland/backendv2/infra/log"
	"solarland/backendv2/pkg/run"
)

type container struct {
	*service.BasicService
	db       *gorm.DB
	runGroup *run.Group
}

// Run main
func Run(ctx context.Context, cfg *viper.Viper) {
	defer func() {
		if err := recover(); err != nil {
			log.L(ctx).Error("panic", log.Any("err", err))
		}
	}()
	container, cleanup, err := initialize(ctx, cfg)
	check(err, "{{ .ServerName | LowerFirstChar }} run failed")
	defer cleanup()
	check(InitTables(container.db), "db init migrate failed")
	if err := run.Run(container.runGroup); err != nil {
		log.L(ctx).Error("runtime error", log.Error(err))
	}
}

// InitTables 初始化表结构
func InitTables(db *gorm.DB) error {
	tables := []interface{}{
		entity.{{ .ModelName }}{},
	}
	return db.AutoMigrate(tables...)
}
