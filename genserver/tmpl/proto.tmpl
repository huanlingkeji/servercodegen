syntax = "proto3";

package {{ .ServerName | LowerFirstChar }};

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";
import "avatar/{{ .ServerName | LowerFirstChar }}/types.proto";

option go_package = "solarland/backendv2/proto/gen/go/avatar/{{ .ServerName | LowerFirstChar }}";

message BatchFetchUser{{ .ModelName }}Request {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  string receiver_id = 1;
  string game_id = 2;
  int32 page = 3;
  int32 per_page_num = 4;
  {{- end }}
}

message BatchFetchUser{{ .ModelName }}Response {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  repeated {{ .ModelName }} {{ .ModelName | LowerFirstChar }}_list = 1;
  int64 total_count = 2;
  {{- end }}
}

message FetchUser{{ .ModelName }}Request {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  string {{ .ModelName | LowerFirstChar }}_id = 1;
  string game_id = 2;
  {{- end }}
}

message FetchUser{{ .ModelName }}Response {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  {{ .ModelName }} {{ .ModelName | LowerFirstChar }} = 1;
  {{- end }}
}

message Create{{ .ModelName }}Request {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  string sender_id = 1;
  repeated string receiver_id_list = 2;
  string content = 3;
  bool is_priority = 4;
  int64 send_time = 5;
  string game_id = 6;
  int64 valid_time = 7;
  {{- end }}
}

message Create{{ .ModelName }}Response {

}

message Delete{{ .ModelName }}Request {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  string {{ .ModelName | LowerFirstChar }}_id = 1;
  string game_id = 2; //未使用
  {{- end }}
}

message Delete{{ .ModelName }}Response {

}

message Modify{{ .ModelName }}Request {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
  string {{ .ModelName | LowerFirstChar }}_id = 1;
  string game_id = 2;
  google.protobuf.BoolValue is_read = 3;
  google.protobuf.BoolValue is_operated = 4;
  string receiver = 5;
  {{- end }}
}

message Modify{{ .ModelName }}Response {

}

service {{ .ServerName }}Service {
  rpc BatchFetchUser{{ .ModelName }}(BatchFetchUser{{ .ModelName }}Request)returns(BatchFetchUser{{ .ModelName }}Response);
  rpc FetchUser{{ .ModelName }}(FetchUser{{ .ModelName }}Request)returns(FetchUser{{ .ModelName }}Response);
  rpc Create{{ .ModelName }}(Create{{ .ModelName }}Request)returns(Create{{ .ModelName }}Response);
  rpc Delete{{ .ModelName }}(Delete{{ .ModelName }}Request)returns(Delete{{ .ModelName }}Response);
  rpc Modify{{ .ModelName }}(Modify{{ .ModelName }}Request)returns(Modify{{ .ModelName }}Response);
}