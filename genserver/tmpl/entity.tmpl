package entity

import (
	"context"
	"gorm.io/gorm"
	"time"
)

// {{ .ModelName }}
type {{ .ModelName }} struct {
	gorm.Model
	{{ .ModelName }}ID string `gorm:"type:varchar(255) not null;unique:uix_{{ .ModelName | LowerFirstChar }}_id"`
	{{ .ModelName }}Vo `gorm:"embedded"`
}

// {{ .ModelName }}Vo
type {{ .ModelName }}Vo struct {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
	Priority  bool      ``
	Content   string    ``
	SendTime  time.Time `gorm:"type:timestamptz(0)"`
	ValidTime time.Time `gorm:"type:timestamptz(0)"`
    {{- end }}
}

// BatchGet{{ .ModelName }}Filter 批量筛选
type BatchGet{{ .ModelName }}Filter struct {
	Limit                int
	Offset               int
	Order                *string //排序 预留实现
  // TODO 填充自己的结构
  {{ if .ShowExample}}
	IDList               *[]string
	Priority             *bool
	Content              *string
	SendTimeSearchBegin  *int64 `` // 发送时间
	SendTimeSearchEnd    *int64 `` // 发送时间
	ValidTimeSearchBegin *int64 `` // 有效截止时间
	ValidTimeSearchEnd   *int64 `` // 有效截止时间
    {{- end }}
}

// Update{{ .ModelName }}Input 更新结构
type Update{{ .ModelName }}Input struct {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
	Priority  *bool   `` // 优先级
	Content   *string `` // 内容
	SendTime  *int64  `` // 发送时间
	ValidTime *int64  `` // 有效截止时间
    {{- end }}
}

// Display{{ .ModelName }} struct
type Display{{ .ModelName }} struct {
  // TODO 填充自己的结构
  {{ if .ShowExample}}
	ID           string
	Priority     bool
	Content      string
	SendTime     time.Time
	ValidTime    time.Time
	IsReaded     bool
	IsOperate    bool
	ReceiverList []string
    {{- end }}
}

// {{ .ModelName }}Repository
type {{ .ModelName }}Repository interface {
	Get(ctx context.Context, id string) (*{{ .ModelName }}, error)
	BatchGet(ctx context.Context, filter *BatchGet{{ .ModelName }}Filter) ([]*{{ .ModelName }}, int64, error)
	Update(ctx context.Context, id string, input *Update{{ .ModelName }}Input) (*{{ .ModelName }}, error)
	Create(ctx context.Context, {{ .ModelName | LowerFirstChar }}Vo {{ .ModelName }}Vo) (*{{ .ModelName }}, error)
	Delete(ctx context.Context, id string) error
}

// {{ .ModelName }}UseCase interface
type {{ .ModelName }}UseCase interface {
	Modify{{ .ModelName }}(ctx context.Context, {{ .ModelName | LowerFirstChar }}ID, gameID, receiver string, isRead, isOperate *bool) error
	Delete{{ .ModelName }}(ctx context.Context, {{ .ModelName | LowerFirstChar }}ID, gameID string) error
	Create{{ .ModelName }}(ctx context.Context, gameID, sender, content string, receiverList []string, sendTime, validTime int64, isPriority bool) error
	FetchUser{{ .ModelName }}(ctx context.Context, {{ .ModelName | LowerFirstChar }}ID, gameID string) (*Display{{ .ModelName }}, error)
	BatchFetchUser{{ .ModelName }}(ctx context.Context, gameID, receiverID string, page, perPageNum int32) ([]*Display{{ .ModelName }}, int64, error)
}
