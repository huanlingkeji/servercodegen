package repository

import (
	"context"
	"github.com/pkg/errors"
	"github.com/rs/xid"
	"gorm.io/gorm"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/domain/entity"
	"solarland/backendv2/infra/log"
	gormtx "solarland/backendv2/pkg/transactional/gorm"
	"time"
)

func generate{{ .ModelName }}ID() string {
	return "{{ .ModelName | LowerFirstChar }}id:" + xid.New().String()
}

// {{ .ModelName }}Repository {{ .ModelName }}Repository
type {{ .ModelName }}Repository struct {
	Proxy *gormtx.Proxy
}

var _ entity.{{ .ModelName }}Repository = (*{{ .ModelName }}Repository)(nil)

func (e {{ .ModelName }}Repository) Get(ctx context.Context, id string) (*entity.{{ .ModelName }}, error) {
	log.L(ctx).Debug("Get", log.String("id", id))
	result := new(entity.{{ .ModelName }})
	err := e.Proxy.Do(ctx, func(ctx context.Context, tx *gorm.DB) error {
		err := tx.Model(result).Where("{{ .ModelName | LowerFirstChar }}_id", id).First(result).Error
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (e {{ .ModelName }}Repository) BatchGet(ctx context.Context, filter *entity.BatchGet{{ .ModelName }}Filter) ([]*entity.{{ .ModelName }}, int64, error) {
	log.L(ctx).Debug("BatchGet", log.Any("filter", filter))
	var res []*entity.{{ .ModelName }}
	var count int64
	err := e.Proxy.Do(ctx, func(ctx context.Context, tx *gorm.DB) error {
		if err := tx.Model(new(entity.{{ .ModelName }})).Scopes({{ .ModelName | LowerFirstChar }}FilterScope(filter), {{ .ModelName | LowerFirstChar }}OrderScope(filter),
			{{ .ModelName | LowerFirstChar }}PageScope(filter)).Find(&res).Error; err != nil {
			return errors.WithStack(err)
		}
		if err := tx.Model(new(entity.{{ .ModelName }})).Scopes({{ .ModelName | LowerFirstChar }}FilterScope(filter)).Count(&count).Error; err != nil {
			return errors.WithStack(err)
		}
		return nil
	})
	if err != nil {
		return nil, 0, err
	}
	return res, count, nil
}

func (e {{ .ModelName }}Repository) Update(ctx context.Context, id string, input *entity.Update{{ .ModelName }}Input) (*entity.{{ .ModelName }}, error) {
	log.L(ctx).Debug("Update", log.String("id", id), log.Any("input", input))
	var {{ .ModelName | LowerFirstChar }} entity.{{ .ModelName }}
    // TODO 实现自己的update
    {{ if .ShowExample}}
	// dbUpdate := make(map[string]interface{})
	// {
	// 	if input.Priority != nil {
	// 		dbUpdate["priority"] = *input.Priority
	// 	}
	// 	if input.Content != nil {
	// 		dbUpdate["content"] = *input.Content
	// 	}
	// 	if input.SendTime != nil {
	// 		dbUpdate["send_time"] = time.Unix(*input.SendTime, 0)
	// 	}
	// 	if input.ValidTime != nil {
	// 		dbUpdate["valid_time"] = time.Unix(*input.ValidTime, 0)
	// 	}
	// }
	// err := e.Proxy.Do(ctx, func(ctx context.Context, tx *gorm.DB) error {
	// 	tx = tx.Model(new(entity.{{ .ModelName }}))
	// 	if err := tx.Where("{{ .ModelName | LowerFirstChar }}_id = ?", id).Updates(dbUpdate).Error; err != nil {
	// 		return errors.WithStack(err)
	// 	}
	// 	if err := tx.Where("{{ .ModelName | LowerFirstChar }}_id = ?", id).First(&{{ .ModelName | LowerFirstChar }}).Error; err != nil {
	// 		return errors.WithStack(err)
	// 	}
	// 	return nil
	// })
	// if err != nil {
	// 	return nil, err
	// }
	{{- end }}
	return &{{ .ModelName | LowerFirstChar }}, nil
}

func (e {{ .ModelName }}Repository) Create(ctx context.Context, {{ .ModelName | LowerFirstChar }}V0 entity.{{ .ModelName }}Vo) (*entity.{{ .ModelName }}, error) {
	log.L(ctx).Debug("Create", log.Any("{{ .ModelName | LowerFirstChar }}V0", {{ .ModelName | LowerFirstChar }}V0))
	{{ .ModelName | LowerFirstChar }} := &entity.{{ .ModelName }}{
		Model:   gorm.Model{},
		{{ .ModelName }}ID: generate{{ .ModelName }}ID(),
		{{ .ModelName }}Vo: {{ .ModelName | LowerFirstChar }}V0,
	}
	if err := e.Proxy.Do(ctx, func(ctx context.Context, tx *gorm.DB) error {
		return errors.WithStack(tx.Create({{ .ModelName | LowerFirstChar }}).Error)
	}); err != nil {
		return nil, err
	}
	return {{ .ModelName | LowerFirstChar }}, nil
}

func (e {{ .ModelName }}Repository) Delete(ctx context.Context, id string) error {
	log.L(ctx).Debug("Delete", log.String("id", id))
	err := e.Proxy.Do(ctx, func(ctx context.Context, tx *gorm.DB) error {
		if err := tx.Delete(new(entity.{{ .ModelName }}), "{{ .ModelName | LowerFirstChar }}_id = ?", id).Error; err != nil {
			return errors.WithStack(err)
		}
		return nil
	})
	return errors.WithStack(err)
}

func {{ .ModelName | LowerFirstChar }}FilterScope(filter *entity.BatchGet{{ .ModelName }}Filter) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
        // TODO 实现自己的filter
        {{ if .ShowExample}}
		// if filter.IDList != nil {
		// 	db = db.Where("{{ .ModelName | LowerFirstChar }}_id in ?", *filter.IDList)
		// }
		// if filter.Priority != nil {
		// 	db = db.Where("priority = ?", *filter.Priority)
		// }
		// if filter.Content != nil {
		// 	db = db.Where("content ~ ?", *filter.Content)
		// }
		// if filter.SendTimeSearchEnd != nil {
		// 	db = db.Where("send_time < ?", time.Unix(*filter.SendTimeSearchEnd, 0))
		// }
		// if filter.SendTimeSearchBegin != nil {
		// 	db = db.Where("send_time > ?", time.Unix(*filter.SendTimeSearchBegin, 0))
		// }
		// if filter.ValidTimeSearchEnd != nil {
		// 	db = db.Where("valid_time < ?", time.Unix(*filter.ValidTimeSearchEnd, 0))
		// }
		// if filter.ValidTimeSearchBegin != nil {
		// 	db = db.Where("valid_time > ?", time.Unix(*filter.ValidTimeSearchBegin, 0))
		// }
		{{- end }}
		return db
	}
}

func {{ .ModelName | LowerFirstChar }}PageScope(filter *entity.BatchGet{{ .ModelName }}Filter) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		if filter.Offset > 0 {
			db = db.Offset(filter.Offset)
		}
		if filter.Limit > 0 {
			db = db.Limit(filter.Limit)
		}
		return db
	}
}

func {{ .ModelName | LowerFirstChar }}OrderScope(filter *entity.BatchGet{{ .ModelName }}Filter) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		// TODO
		if filter.Order != nil {
			//db = db.Order("send_time ASC")
		}
		//default
		return db.Order("id ASC")
	}
}
