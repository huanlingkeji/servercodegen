//go:generate wire
//go:build wireinject
// +build wireinject

package {{ .ServerName | LowerFirstChar }}

import (
	"context"
	"github.com/LilithGames/nevent"
	"github.com/google/wire"
	"github.com/nats-io/nats.go"
	"github.com/spf13/viper"
	"net"
	"solarland/backendv2/cluster/config"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/domain/entity"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/repository"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/service"
	"solarland/backendv2/cluster/{{ .ServerName | LowerFirstChar }}/internal/usecase"
	"solarland/backendv2/infra/aevent"
	"solarland/backendv2/infra/grpc"
	"solarland/backendv2/infra/log"
	"solarland/backendv2/infra/wireinject"
	"solarland/backendv2/pkg/run"
	{{ .ServerName | LowerFirstChar }}pb "solarland/backendv2/proto/gen/go/avatar/{{ .ServerName | LowerFirstChar }}"
)

var set = wire.NewSet(
	wireinject.Set,
	wire.Struct(new(container), "*"),
	wire.Struct(new(service.BasicService), "*"),
	service.NewBasicService,
	provide{{ .ServerName }}EventListener,
	provideRunGroup,

	wire.Struct(new(repository.{{ .ModelName }}Repository), "*"),
	wire.Bind(new(entity.{{ .ModelName }}Repository), new(*repository.{{ .ModelName }}Repository)),

	wire.Struct(new(usecase.{{ .ModelName }}UseCase), "*"),
	wire.Bind(new(entity.{{ .ModelName }}UseCase), new(*usecase.{{ .ModelName }}UseCase)),
)

func initialize(ctx context.Context, cfg *viper.Viper) (*container, func(), error) {
	panic(wire.Build(set))
}

func check(err error, message string) {
	if err != nil {
		log.L().Panic(message, log.Error(err))
	}
}

func provide{{ .ServerName }}EventListener(cfg *viper.Viper, conn *nats.Conn) *nevent.Server {
	ns, err := aevent.NewServer(conn, nevent.Queue("{{ .ServerName | LowerFirstChar }}"))
	check(err, "nevent server failed")
	return ns
}

func provideRunGroup(ctx context.Context, ns *nevent.Server, basicService service.BasicService) *run.Group {
	var g run.Group
	gs := grpc.NewServer(ctx)
	{{ .ServerName | LowerFirstChar }}pb.Register{{ .ServerName }}ServiceServer(gs, basicService)
	gl, err := net.Listen("tcp", ":"+config.{{ .ServerName }}GRPCPort())
	if err != nil {
		log.L(ctx).Panic("grpc tcp listen", log.Error(err))
	}
	subList := make([]*nats.Subscription, 0)
	g.Add(func() error {
		log.L(ctx).Info("{{ .ServerName | LowerFirstChar }}pb.RegisterCreate{{ .ServerName }}...")
		sub, err := {{ .ServerName | LowerFirstChar }}pb.RegisterCreate{{ .ServerName }}(ns, basicService.{{ .ModelName }}UseCase)
		if err != nil {
			return err
		}
		subList = append(subList, sub)
		select {}
	}, func(error) {
		for _, v := range subList {
			_ = v.Unsubscribe()
		}
	})
	g.Add(func() error {
		log.L(ctx).Info("start {{ .ModelName | LowerFirstChar }} grpc server")
		return gs.Serve(gl)
	}, func(error) {
		gs.GracefulStop()
	})
	return &g
}
